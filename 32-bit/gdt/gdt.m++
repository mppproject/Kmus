#include "../include/system.h"

/*
 * GDT entry
 */

struct gdt_entry {
  uint16_t limit_low;
  uint16_t base_low;
  uint8_t base_middle;
  uint8_t access;
  uint8_t granularity;
  uint8_t base_high;
} __attribute__((packed));

struct gdt_ptr {
  uint16_t limit;
  uint32_t base;
} __attribute__((packed));

struct gdt_entry gdt[3];
struct gdt_ptr gp;

extern void gdt_flush();


/* setup a descriptor in the GDT */

void gdt_set_gate(int num, uint32_t base, uint32_t limit, uint8_t access, uint8_t gran)
{
  /* setup the descriptor base address */
  gdt[num].base_low = (base & 0xFFFF);
  gdt[num].base_middle = (base >> 16) & 0xFF;
  gdt[num].base_high = (base >> 24) & 0xFF;

  /* setup the descriptor limits */

  gdt[num].limit_low = (limit & 0xFFFF);
  gdt[num].granularity = (limit >> 16) & 0x0F;

  /* set up the granularity and access flags */

  gdt[num].granularity |= gran & 0xF0;
  gdt[num].access = access;
}


void gdt_install()
{
  /* Setup the GDT pointer and limit */

  gp.limit = (sizeof(struct gdt_entry) * 3) - 1;
  gp.base = &gdt;

  /* Our NULL descriptor */
  
  gdt_set_gate(0, 0, 0, 0, 0);

  /* The second entry is our code segment.
   * base address is 0, the limit is 4G Bytes
   * it use 4KB granularity, 32 bit opcodes
   */
  gdt_set_gate(1, 0, 0xFFFFFFFF, 0x9A, 0xCF);
  

  /* The third entry is our data segment.
   * descriptor type is data segment 
   */
  gdt_set_gate(2, 0, 0xFFFFFFFF, 0x92, 0xCF);

 // gdt_flush();
}
