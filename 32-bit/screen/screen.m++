#if !defined(__cplusplus)
#include <stdbool.h> /* C doesn't have booleans by default. */
#endif
#include <stddef.h>
#include <stdint.h>
#include <errno.h>
#include <sys/io.h>
#include <types.h>
#include <sys.h>
#include <kbd.h>
#include <kernel.h>
#include <timer.h>
#include <floppy.h>
#include <fat.h>
#include <conio.h>
#include <stdint.h>
#include <sys/io.h>
//#include <string.h>
#include <lib.h>
#include <vesa.h>
#include "screen.h"
#include "../include/system.h"
size_t strlen(const char* str);
size_t terminal_row;
size_t terminal_column;
uint8_t terminal_color;
uint16_t *terminal_buffer;

uint8_t _make_color(enum vga_color fg, enum vga_color bg)
{
	return fg | bg << 4;
}

uint16_t _make_vga_entry(char c, uint8_t color)
{
	uint16_t c16 = c;
	uint16_t color16 = color;
	return c16 | color16 << 8;
}



void _terminal_initialize()
{
	terminal_row = 0;
	terminal_column = 0;
	terminal_color = _make_color(COLOR_LIGHT_GREY, COLOR_BLACK);
	terminal_buffer = (uint16_t*) 0xB8000;
	for (size_t y = 0; y < VGA_HEIGHT; y++) {
		for (size_t x = 0; x < VGA_WIDTH; x++) {
			const size_t index = y * VGA_WIDTH + x;
			terminal_buffer[index] = _make_vga_entry(' ', terminal_color);
		}
	}
}

void _terminal_set_color(uint8_t color)
{
	terminal_color = color;
}

void _terminal_put_entry_at(char c, uint8_t color, size_t x, size_t y)
{
	const size_t index = y * VGA_WIDTH + x;
	terminal_buffer[index] = _make_vga_entry(c, color);
}

void _terminal_scroll()
{
	uint8_t i,j;
	size_t index;

	if (terminal_row == VGA_HEIGHT) {
		for(i = 0; i < VGA_HEIGHT; i++) {
			for (j = 0; j < VGA_WIDTH; j++) {
				index = i * VGA_WIDTH + j;
				terminal_buffer[index] = terminal_buffer[index + VGA_WIDTH];
			}
		}
		terminal_row--;
	}
		
}



void _move_csr()
{
	int index;
	
	index = terminal_row * VGA_WIDTH + terminal_column;

	outb(VGA_ADDR_REG, 14);
	outb(VGA_DATA_REG, index >> 8 & 0xFF);
	outb(VGA_ADDR_REG, 15);
	outb(VGA_DATA_REG, index & 0xFF);
}

void _screen_cls()
{
	memset(terminal_buffer, ' ', VGA_WIDTH * VGA_HEIGHT);
	terminal_row = 0;
	terminal_column = 0;
	_move_csr();
}

void _terminal_put_char(char c)
{
	switch (c) {
	/* newline */
	case '\n':
		terminal_column = 0;
		terminal_row++;
		break;

	/* backspace */
	case 0x08:
		if (terminal_column != 0)
			terminal_column--;
		break;

	/* tab, increase to point divisible by 8 */
	case 0x09:
		terminal_column = (terminal_column + 8) & ~(8 - 1);
		break;

	/* carriage return */
	case '\r':
		terminal_column = 0;
		break;
	    
	/* draw the printable character */
	default:
		/* printable */
		if (c >= ' ') {
			_terminal_put_entry_at(c, terminal_color, terminal_column, terminal_row);

			if (++terminal_column == VGA_WIDTH) {
				terminal_column = 0;
				terminal_row++;
			}
		}

	}

	/* we will scroll screen while it's full */
	_terminal_scroll();
	_move_csr();

}
void _terminal_put_char_top(char c)
{
	switch (c) {
	/* newline */
	case '\n':
		terminal_column = 0;
		terminal_row++;
		break;

	/* backspace */
	case 0x08:
		if (terminal_column != 0)
			terminal_column--;
		break;

	/* tab, increase to point divisible by 8 */
	case 0x09:
		terminal_column = (terminal_column + 8) & ~(8 - 1);
		break;

	/* carriage return */
	case '\r':
		terminal_column = 0;
		break;
	    
	/* draw the printable character */
	default:
		/* printable */
		if (c >= ' ') {
			_terminal_put_entry_at(c, terminal_color, 15, 1);

			if (++terminal_column == VGA_WIDTH) {
				terminal_column = 0;
				terminal_row++;
			}
		}

	}

	/* we will scroll screen while it's full */
	_terminal_scroll();
	_move_csr();

}

void _terminal_put_string(const char *data)
{
	size_t data_len = strlen(data);

	for (size_t i = 0; i < data_len; i++)
		_terminal_put_char(data[i]);
}

void _screen_print_str(unsigned char *msg)
{
	_terminal_put_string(msg);
}

void _screen_print_char(unsigned char c)
{
	_terminal_put_char(c);
}

void _print_to_char(uint32_t n, int type)
{
	uint8_t digit = n;

	if (type == 16) {
		switch (digit) {
		case 10:
			digit = 'A';
			break;
		case 11:
			digit = 'B';
			break;
		case 12:
			digit = 'C';
			break;
		case 13:
			digit = 'D';
			break;
		case 14:
			digit = 'E';
			break;
		case 15:
			digit = 'F';
			break;

		default:
			digit = '0' + digit;
			break;
		
		}
	}
	else 
		digit = '0' + digit;
		
	_screen_print_char(digit);
}
	

/* print different type number */
void _screen_print_num(uint32_t n, int type)
{
	int digit;

	if (n != (n % type)) {
		digit = n % type;
		n = n / type;
		_screen_print_num(n, type);
		_print_to_char(digit, type);
	}
	else {
		_print_to_char(n, type);
	}
}

void _screen_print_dec(uint32_t n)
{
	_screen_print_num(n, 10);
}

void _screen_print_hex(uint32_t n)
{
	_screen_print_num(n, 16);
}
