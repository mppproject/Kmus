#include "system.h"
#include "isr.h"

#define i8259_MASTER_CTL  0x20
#define i8259_MASTER_DATA 0x21
#define i8259_SLAVER_CTL  0xA0
#define i8259_SLAVER_DATA 0xA1

/* Declare IRQ handlers */

extern void irq0();
extern void irq1();
extern void irq2();
extern void irq3();
extern void irq4();
extern void irq5();
extern void irq6();
extern void irq7();

extern void irq8();
extern void irq9();
extern void irq10();
extern void irq11();
extern void irq12();
extern void irq13();
extern void irq14();
extern void irq15();

/* array of function pointers. */

void *irq_handlers[16] = {0};

/* install irq handler */
void irq_install_handler(int irq, void (*handler)(struct regs *r))
{
	irq_handlers[irq] = handler;
}

/* remove handler for irq */
void irq_uninstall_handler(int irq) 
{
	irq_handlers[irq] = 0;
}

/* Normally, IRQs 0 to 7 are mapped to entries 8 to 15. This
*  is a problem in protected mode, because IDT entry 8 is a
*  Double Fault! Without remapping, every time IRQ0 fires,
*  you get a Double Fault Exception, which is NOT actually
*  what's happening. We send commands to the Programmable
*  Interrupt Controller (PICs - also called the 8259's) in
*  order to make IRQ0 to 15 be remapped to IDT entries 32 to
*  47 
*/

/* programming i8259 */
void irq_remap()
{
	outportb(i8259_MASTER_CTL, 0x11);
	outportb(i8259_SLAVER_CTL, 0x11);
	outportb(i8259_MASTER_DATA, 0x20);
	outportb(i8259_SLAVER_DATA, 0x28);
	outportb(i8259_MASTER_DATA, 0x04);
	outportb(i8259_SLAVER_DATA, 0x02);
	outportb(i8259_MASTER_DATA, 0x01);
	outportb(i8259_SLAVER_DATA, 0x01);
	outportb(i8259_MASTER_DATA, 0x0);
	outportb(i8259_SLAVER_DATA, 0x0);

}

void irq_install()
{
	irq_remap();

	idt_set_gate(32, (unsigned)irq0, 0x08, 0x8E);
	idt_set_gate(33, (unsigned)irq1, 0x08, 0x8E);
	idt_set_gate(34, (unsigned)irq2, 0x08, 0x8E);
	idt_set_gate(35, (unsigned)irq3, 0x08, 0x8E);
	idt_set_gate(36, (unsigned)irq4, 0x08, 0x8E);
	idt_set_gate(37, (unsigned)irq5, 0x08, 0x8E);
	idt_set_gate(38, (unsigned)irq6, 0x08, 0x8E);
	idt_set_gate(39, (unsigned)irq7, 0x08, 0x8E);
	idt_set_gate(40, (unsigned)irq8, 0x08, 0x8E);
	idt_set_gate(41, (unsigned)irq9, 0x08, 0x8E);
	idt_set_gate(42, (unsigned)irq10, 0x08, 0x8E);
	idt_set_gate(43, (unsigned)irq11, 0x08, 0x8E);
	idt_set_gate(44, (unsigned)irq12, 0x08, 0x8E);
	idt_set_gate(45, (unsigned)irq13, 0x08, 0x8E);
	idt_set_gate(46, (unsigned)irq14, 0x08, 0x8E);
	idt_set_gate(47, (unsigned)irq15, 0x08, 0x8E);
}

/* Each of the IRQ ISRs point to this function, rather than
*  the 'fault_handler' in 'isrs.c'. The IRQ Controllers need
*  to be told when you are done servicing them, so you need
*  to send them an "End of Interrupt" command (0x20). There
*  are two 8259 chips: The first exists at 0x20, the second
*  exists at 0xA0. If the second controller (an IRQ from 8 to
*  15) gets an interrupt, you need to acknowledge the
*  interrupt at BOTH controllers, otherwise, you only send
*  an EOI command to the first controller. If you don't send
*  an EOI, you won't raise any more IRQs 
*/

void irq_handler(struct regs *r)
{
	void (*handler)(struct regs *r);
	
	handler = irq_handlers[r->int_no - 32];

	if (handler) {
		handler(r);
	}

	/* IRQ > 8, send EOI to slave controller */
	if (r->int_no >= 40) {
		outportb(i8259_SLAVER_CTL, 0x20);
	}

	/* send EOI to master controller */
	
	outportb(i8259_MASTER_CTL, 0x20);
	
}
